class Solution {
public:
    void DFS(int curr, vector<bool>&vis, set<int>&infc, int &inf_count, int &tc, vector<vector<int>>&adj)
    {
        vis[curr]=true;
        
        if(infc.count(curr)==1)
            inf_count++;
        
        tc++;
        
        for(int neigh : adj[curr])
        {
            if(!vis[neigh])
                DFS(neigh,vis,infc,inf_count,tc,adj);
        }
    }
    
    vector<vector<int>>get_adj(vector<vector<int>>&graph)
    {
        int n= graph.size();
        
        vector<vector<int>>adj(n);
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i!=j and graph[i][j])
                    adj[i].push_back(j);
            }
        }
        
        return adj;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        vector<vector<int>>adj=get_adj(graph);
        set<int>infc(initial.begin(),initial.end());

        int ans=-1,count=-1,m=INT_MAX;
        vector<bool>vis(graph.size(),false);
        
        for(auto & n : infc)
        {
            if(vis[n]==false)
            {
                int inf_count=0,tc=0;
                DFS(n,vis,infc,inf_count,tc,adj);
                
                if(count<tc and inf_count==1)
                {
                    ans=n;
                    count=tc;
                }
            }
            m=min(m,n);
        }
        
        if(ans==-1)
            ans=m;
        
        return ans;
    }
};