class Solution {
public:
    
    int par[301],rank[301],infected[301];
    int n;
    
    int findPar(int p){
        
        if(par[p] == p)
            return p;
        
        return par[p] = findPar(par[p]);
    }
    
    void DSUnion(int u,int v){
        
        int p1 = findPar(u), p2 = findPar(v);
        
        if(p1 == p2)
            return;
        
        if(rank[p1]>=rank[p2]){
            par[p2] = p1;
            rank[p1]+=rank[p2];
        }
        
        else{
            par[p1] = p2;
            rank[p2]+=rank[p1];
        }
        
        
        return;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        
        for(int i=0;i<n;i++){
            par[i] = i;
            infected[i] = 0;
            rank[i] = 1;
        }
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                
                if(i == j)
                    continue;
                
                if(graph[i][j] == 1)
                    DSUnion(i,j);
            }
        }
        
        for(int& i : initial){
            infected[findPar(i)]++;
        }
        
        int ans = 1e5+1,maxSize = 0,mini = 1e5+1;
        
        for(int&i : initial){
            int p = findPar(i);
            
            
            
            if(infected[p] == 1 and rank[p]>=maxSize){
                
                if(rank[p]>maxSize){
                    maxSize = rank[p];
                    ans = i;
                }
                
                else
                ans = min(i,ans);
                
                
            }
            
            mini = min(i,mini);
        }
        
        return ans == 1e5+1 ? mini : ans;
    }
};